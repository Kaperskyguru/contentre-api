import { environment } from '@/helpers/environment'
import { logError } from '@/helpers/logger'
import { ApolloError } from 'apollo-server-core'
import nodemailer from 'nodemailer'
import forgotPassword from '@extensions/mail-service/email-templates/forgot-password'
import passwordChanged from '@extensions/mail-service/email-templates/password-changed'
import welcome from '@extensions/mail-service/email-templates/welcome'
const Mailjet = require('node-mailjet')
import verificationEmail from './email-templates/verification-email'
import inviteFriends from './email-templates/invite-friends'

interface SendEmail {
  to: string
  template: string
  subject?: string
  variables?: any
}

interface MailOptions {
  from: any
  to: any
  subject: any
  html: any
}

interface SelectTemplate {
  template: string
  variables?: any
}

export default async ({ to, template, variables }: SendEmail) => {
  let subject = ``

  const selectTemplate = async ({ template, variables }: SelectTemplate) => {
    switch (template) {
      case 'forgot-password':
        subject += `Password Reset`
        return forgotPassword(variables)
      case 'email-verification':
        subject += `Email Verification`
        return verificationEmail(variables)
      case 'password-changed':
        subject += `Password Changed`
        return passwordChanged(variables)
      case 'welcome':
        subject += `Welcome to Contentre!`
        return welcome(variables)
      case 'invite-friends':
        subject += `Invitation to join Contentre!`
        return inviteFriends(variables)
    }
  }

  const temp = await selectTemplate({ template, variables })

  new Promise((resolve, reject) => {
    // if (environment.context !== 'PRODUCTION') {
    //   // create message
    //   var mailOptions: MailOptions = {
    //     from: `"${process.env.APP_NAME}" <info@contentre.io>`,
    //     to,
    //     subject,
    //     html: temp
    //   }

    //   const transporter = nodemailer.createTransport({
    //     host: environment.mail?.host || 'smtp.mailtrap.io',
    //     port: environment.mail?.port || 2525,
    //     auth: {
    //       user: environment.mail?.username || 'a3d1159bbbe3a6', //generated by Mailtrap
    //       pass: environment.mail?.password || '2b4668fe2d6a67' //generated by Mailtrap
    //     }
    //   })

    //   transporter.sendMail(mailOptions, (error, info) => {
    //     if (error) {
    //       logError('sendEmail %o', { mailOptions, error })
    //       reject(new ApolloError('try email again later', '500', error))
    //       return
    //     }

    //     resolve(info)
    //   })
    //   return
    // }

    const mailjet = Mailjet.connect(
      environment.mailjet.apiKey,
      environment.mailjet.apiSecret
    )

    let request = null
    if (template === 'welcome') {
      request = mailjet.post('send', { version: 'v3.1' }).request({
        Messages: [
          {
            From: {
              Email: environment.mail?.sender ?? 'info@contentre.io',
              Name: environment.appName ?? 'Contentre'
            },
            To: [
              {
                Email: to,
                Name: variables?.to_name ?? ''
              }
            ],
            Subject: subject,
            TemplateID: 3987459,
            TemplateLanguage: true,
            Variables: {
              USERNAME: variables.username,
              NAME: variables.to_name
            }
          }
        ]
      })
    } else {
      request = mailjet.post('send', { version: 'v3.1' }).request({
        Messages: [
          {
            From: {
              Email: environment.mail?.sender ?? 'info@contentre.io',
              Name: environment.appName ?? 'Contentre'
            },
            To: [
              {
                Email: to,
                Name: variables?.to_name ?? ''
              }
            ],
            Subject: subject,
            HTMLPart: temp
          }
        ]
      })
    }
    request
      .then((result: any) => {
        resolve(result.body)
      })
      .catch((err: any) => {
        reject(err.statusCode)
      })
  })
}
