datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

model User {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  email                 String               @unique
  name                  String               @db.VarChar(100)
  username              String?              @db.VarChar(60)
  password              String?              @db.VarChar(60)
  firstname             String?              @db.VarChar(35)
  lastname              String?              @db.VarChar(35)
  jobTitle              String?              @db.VarChar(60)
  homeAddress           String?              @db.VarChar(2048)
  bio                   String?              @db.VarChar(2048)
  skype                 String?              @db.VarChar(35)
  portfolio             String?              @db.VarChar(2048)
  emailConfirmed        Boolean              @default(false)
  phoneCode             String?              @db.VarChar(5)
  phoneNumber           String?              @db.VarChar(15)
  phoneConfirmed        Boolean              @default(false)
  hasFinishedOnboarding Boolean              @default(false)
  avatarURL             String?              @db.VarChar(2048)
  createdAt             DateTime             @default(now()) @db.Timestamp(6)
  updatedAt             DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  lastActivityAt        DateTime             @default(now()) @db.Timestamp(6)
  twofactor             TwoFactorType        @default(NONE)
  referrerId            String?              @db.Char(36)
  referrer              User?                @relation("UserToUser", fields: [referrerId], references: [id])
  verificationIntents   VerificationIntent[] @relation("UserVerificationIntent")
  clients               Client[]             @relation("UserClient")
  contents              Content[]            @relation("UserContent")
  socials               Social[]             @relation("SocialUser")
  User                  User[]               @relation("UserToUser")
  Portfolio             Portfolio[]          @relation("UserPortfolio")
  Template              Template[]           @relation("UserTemplate")
  Category              Category[]           @relation("UserCategory")
  Tag                   Tag[]                @relation("UserTag")
}

enum TwoFactorType {
  EMAIL
  SMS
  NONE
}

model VerificationIntent {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  user        User                   @relation("UserVerificationIntent", fields: [userId], references: [id])
  userId      String                 @db.Char(36)
  type        VerificationIntentType
  refreshCode String                 @db.VarChar(100)
  expiresAt   DateTime               @default(dbgenerated("now_plus_60_minutes()")) @db.Timestamp(6)
  createdAt   DateTime               @default(now()) @db.Timestamp(6)
  updatedAt   DateTime               @default(now()) @updatedAt @db.Timestamp(6)
}

enum VerificationIntentType {
  EMAIL
  PHONE
}

model Client {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name        String      @db.VarChar(60)
  website     String?     @db.VarChar(2048)
  userId      String      @db.Char(36)
  user        User        @relation("UserClient", fields: [userId], references: [id])
  profile     String?     @db.VarChar(2048)
  icon        String?     @db.VarChar(2048)
  paymentType PaymentType @default(ARTICLE)
  amount      Float       @default(0.0)
  status      Status      @default(ACTIVE)
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  contents    Content[]   @relation("ClientContent")
}

enum Status {
  ACTIVE
  INACTIVE
}

model Content {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title         String         @db.VarChar(2048)
  clientId      String         @db.Char(36)
  client        Client         @relation("ClientContent", fields: [clientId], references: [id])
  userId        String         @db.Char(36)
  user          User           @relation("UserContent", fields: [userId], references: [id])
  visibility    VisibilityType @default(PUBLISHED)
  lastUpdated   DateTime       @default(now()) @db.Timestamp(6)
  url           String?        @db.VarChar(2048)
  type          ContentType    @default(TEXT)
  excerpt       String         @db.VarChar(2048)
  content       String?        @db.Text
  amount        Float          @default(0.0)
  favourite     Boolean        @default(false)
  bookmark      Boolean        @default(false)
  comments      Int            @default(0)
  paymentType   PaymentType    @default(ARTICLE)
  likes         Int            @default(0)
  shares        Int            @default(0)
  featuredImage String?        @db.VarChar(2048)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  topics        Topic[]        @relation("ContentTopic")
  categoryId    String?        @db.Char(36)
  tags          Json?          @db.Json
  category      Category?      @relation("ContentCategory", fields: [categoryId], references: [id])

  @@index([clientId, userId])
}

model Portfolio {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title       String       @db.VarChar(2048)
  userId      String       @db.Char(36)
  user        User         @relation("UserPortfolio", fields: [userId], references: [id])
  url         String       @db.VarChar(2048)
  description String?      @db.Text
  type        String?      @db.VarChar(36)
  template    UserTemplate @relation("UserTemplatePortfolio", fields: [templateId], references: [id])
  templateId  String       @db.Char(36)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamp(6)

  @@unique([url], name: "uniqueURL", map: "uniqueURL")
}

model Template {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title        String           @db.VarChar(2048)
  userId       String?          @db.Char(36)
  user         User?            @relation("UserTemplate", fields: [userId], references: [id])
  content      String           @db.Text
  visibility   TemplateVisility @default(PRIVATE)
  createdAt    DateTime         @default(now()) @db.Timestamp(6)
  updatedAt    DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  UserTemplate UserTemplate[]   @relation("TemplateUserTemplate")
}

model UserTemplate {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  content    String      @db.Text
  templateId String      @db.Char(36)
  template   Template    @relation("TemplateUserTemplate", fields: [templateId], references: [id])
  portfolio  Portfolio[] @relation("UserTemplatePortfolio")
  createdAt  DateTime    @default(now()) @db.Timestamp(6)
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamp(6)
}

enum TemplateVisility {
  PUBLIC
  PRIVATE
  TEAM
}

enum PaymentType {
  ARTICLE
  MONTHLY
  ONETIME
}

enum VisibilityType {
  PUBLISHED
  DRAFT
  DELETED
}

enum ContentType {
  TEXT
  AUDIO
  VIDEO
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String   @db.VarChar(120)
  userId    String?  @db.Char(36)
  user      User?    @relation("UserTag", fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Category {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String    @db.VarChar(120)
  color     String?   @db.Char(6)
  userId    String?   @db.Char(36)
  user      User?     @relation("UserCategory", fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  contents  Content[] @relation("ContentCategory")
}

model Topic {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String   @db.VarChar(120)
  content   Content? @relation("ContentTopic", fields: [contentId], references: [id])
  contentId String?  @db.Char(36)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Social {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String   @db.VarChar(120)
  link      String   @db.VarChar(2048)
  icon      String?  @db.VarChar(2048)
  user      User     @relation("SocialUser", fields: [userId], references: [id])
  userId    String   @db.Char(36)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}
