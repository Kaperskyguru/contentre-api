datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

model User {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  email                 String               @unique
  name                  String               @db.VarChar(100)
  username              String?              @db.VarChar(60)
  password              String?              @db.VarChar(60)
  firstname             String?              @db.VarChar(35)
  lastname              String?              @db.VarChar(35)
  jobTitle              String?              @db.VarChar(60)
  homeAddress           String?              @db.VarChar(2048)
  country               String?              @db.VarChar(35)
  bio                   String?              @db.VarChar(2048)
  portfolioURL          String?              @db.VarChar(2048)
  emailConfirmed        Boolean              @default(false)
  phoneCode             String?              @db.VarChar(5)
  phoneNumber           String?              @db.VarChar(15)
  phoneConfirmed        Boolean              @default(false)
  hasFinishedOnboarding Boolean              @default(false)
  avatarURL             String?              @db.VarChar(2048)
  createdAt             DateTime             @default(now()) @db.Timestamp(6)
  updatedAt             DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  lastActivityAt        DateTime             @default(now()) @db.Timestamp(6)
  twofactor             TwoFactorType        @default(NONE)
  signedUpThrough       SignedUpThrough      @default(CONTENTRE)
  referrerId            String?              @db.Char(36)
  subscriptionId        String?              @unique @db.Char(36)
  subscription          Subscription?        @relation("UserSubscription", fields: [subscriptionId], references: [id])
  activeSubscriptionId  String?              @unique @db.Char(36)
  activeSubscription    Subscription?        @relation("UserSubscriptionActive", fields: [activeSubscriptionId], references: [id])
  billingId             String?              @db.Char(36)
  hasTrial              Boolean              @default(false)
  trialEndDate          DateTime?            @db.Timestamp(6)
  activeTeamId          String?              @db.Char(36)
  isPremium             Boolean              @default(false)
  teams                 Member[]             @relation("UserMember")
  activeTeam            Member?              @relation("UserMemberActive", fields: [id, activeTeamId], references: [userId, teamId], onDelete: NoAction)
  referrer              User?                @relation("UserToUser", fields: [referrerId], references: [id])
  verificationIntents   VerificationIntent[] @relation("UserVerificationIntent")
  clients               Client[]             @relation("UserClient")
  contents              Content[]            @relation("UserContent")
  socials               Social[]             @relation("SocialUser")
  users                 User[]               @relation("UserToUser")
  portfolios            Portfolio[]          @relation("UserPortfolio")
  subscriptions         Subscription[]       @relation("UserSubscriptions")
  templates             Template[]           @relation("UserTemplate")
  categories            Category[]           @relation("UserCategory")
  tags                  Tag[]                @relation("UserTag")
  notebooks             Notebook[]           @relation("UserNotebook")
  notes                 Note[]               @relation("UserNote")
}

model Team {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name                 String         @db.VarChar(100)
  address              String?        @db.VarChar(2048)
  portfolio            String?        @db.VarChar(2048)
  avatarURL            String?        @db.VarChar(2048)
  createdAt            DateTime       @default(now()) @db.Timestamp(6)
  updatedAt            DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  activeSubscriptionId String?        @unique @db.Char(36)
  activeSubscription   Subscription?  @relation("TeamSubscriptionActive", fields: [activeSubscriptionId], references: [id])
  billingId            String?        @db.Char(36)
  hasTrial             Boolean        @default(false)
  trialEndDate         DateTime?      @db.Timestamp(6)
  isPremium            Boolean        @default(false)
  members              Member[]       @relation("TeamMember")
  clients              Client[]       @relation("TeamClient")
  contents             Content[]      @relation("TeamContent")
  socials              Social[]       @relation("TeamSocial")
  // Portfolio             Portfolio[]          @relation("UserPortfolio")
  // Template              Template[]           @relation("UserTemplate")
  categories           Category[]     @relation("TeamCategory")
  tags                 Tag[]          @relation("TeamTag")
  connectedApps        ConnectedApp[] @relation("TeamConnectedApp")
  media                Media[]        @relation("TeamMedia")
  topics               Topic[]        @relation("TeamTopic")
  subscriptions        Subscription[] @relation("TeamSubscription")
  notebooks            Notebook[]     @relation("TeamNotebook")
  notes                Note[]         @relation("TeamNote")
}

model Member {
  userId                 String     @db.Char(36)
  teamId                 String     @db.Char(36)
  role                   MemberRole
  createdAt              DateTime   @default(now()) @db.Timestamp(6)
  updatedAt              DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  team                   Team       @relation("TeamMember", fields: [teamId], references: [id], onDelete: Cascade)
  user                   User       @relation("UserMember", fields: [userId], references: [id], onDelete: Cascade)
  usersWithCompanyActive User[]     @relation("UserMemberActive")

  @@id([userId, teamId])
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum SignedUpThrough {
  CONTENTRE
  GOOGLE
}

enum TwoFactorType {
  EMAIL
  SMS
  NONE
}

model VerificationIntent {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  user        User                   @relation("UserVerificationIntent", fields: [userId], references: [id])
  userId      String                 @db.Char(36)
  type        VerificationIntentType
  refreshCode String                 @db.VarChar(100)
  expiresAt   DateTime               @default(dbgenerated("now_plus_60_minutes()")) @db.Timestamp(6)
  createdAt   DateTime               @default(now()) @db.Timestamp(6)
  updatedAt   DateTime               @default(now()) @updatedAt @db.Timestamp(6)
}

enum VerificationIntentType {
  EMAIL
  PHONE
}

model App {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  icon         String?        @db.VarChar(2048)
  name         String         @db.VarChar(60)
  description  String?        @db.VarChar(2048)
  website      String?        @db.VarChar(2048)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  connectedApp ConnectedApp[] @relation("AppConnectedApp")

  @@unique([name], name: "uniqueName", map: "uniqueName")
}

model ConnectedApp {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name        String   @db.VarChar(60)
  slug        String   @db.VarChar(60)
  token       String?  @db.VarChar(2048)
  secret      String?  @db.VarChar(2048)
  isActivated Boolean  @default(false)
  teamId      String   @db.Char(36)
  team        Team     @relation("TeamConnectedApp", fields: [teamId], references: [id])
  appId       String   @db.Char(36)
  app         App      @relation("AppConnectedApp", fields: [appId], references: [id])
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Client {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name        String      @db.VarChar(60)
  website     String?     @db.VarChar(2048)
  userId      String      @db.Char(36)
  user        User        @relation("UserClient", fields: [userId], references: [id])
  teamId      String?     @db.Char(36)
  team        Team?       @relation("TeamClient", fields: [teamId], references: [id])
  profile     String?     @db.VarChar(2048)
  icon        String?     @db.VarChar(2048)
  paymentType PaymentType @default(ARTICLE)
  visibility  Visibility  @default(PUBLIC)
  amount      Float       @default(0.0)
  status      Status      @default(ACTIVE)
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  contents    Content[]   @relation("ClientContent")
  portfolios  Portfolio[] @relation("ClientPortfolio")

  @@unique([name, userId, website], name: "name_userId_website_unique_constraint", map: "name_userId_website_unique_constraint")
}

enum Status {
  ACTIVE
  INACTIVE
}

model Content {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title         String      @db.VarChar(2048)
  clientId      String?     @db.Char(36)
  client        Client?     @relation("ClientContent", fields: [clientId], references: [id])
  userId        String      @db.Char(36)
  user          User        @relation("UserContent", fields: [userId], references: [id])
  team          Team?       @relation("TeamContent", fields: [teamId], references: [id])
  teamId        String?     @db.Char(36)
  status        StatusType  @default(PUBLISHED)
  lastUpdated   DateTime    @default(now()) @db.Timestamp(6)
  url           String?     @db.VarChar(2048)
  type          ContentType @default(TEXT)
  excerpt       String      @db.VarChar(2048)
  content       String?     @db.Text
  amount        Float       @default(0.0)
  favourite     Boolean     @default(false)
  bookmark      Boolean     @default(false)
  comments      Int         @default(0)
  visibility    Visibility  @default(PUBLIC)
  paymentType   PaymentType @default(ARTICLE)
  likes         Int         @default(0)
  shares        Int         @default(0)
  notebookId    String?     @db.Char(36)
  notebook      Notebook?   @relation("NotebookContent", fields: [notebookId], references: [id])
  shareable     Boolean     @default(false)
  shareLink     String?     @db.VarChar(2048)
  featuredImage String?     @db.VarChar(2048)
  publishedDate DateTime?   @db.Timestamp(6)
  isPremium     Boolean     @default(false)
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  updatedAt     DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  topics        Json?       @db.Json
  categoryId    String?     @db.Char(36)
  tags          Json?       @db.Json
  category      Category?   @relation("ContentCategory", fields: [categoryId], references: [id])

  @@index([userId, teamId])
}

model Portfolio {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title       String       @db.VarChar(2048)
  userId      String       @db.Char(36)
  user        User         @relation("UserPortfolio", fields: [userId], references: [id])
  url         String       @db.VarChar(2048)
  description String?      @db.Text
  clientId    String?      @db.Char(36)
  client      Client?      @relation("ClientPortfolio", fields: [clientId], references: [id])
  category    Category?    @relation("CategoryPortfolio", fields: [categoryId], references: [id])
  categoryId  String?      @db.Char(36)
  tags        Json?        @db.Json
  type        String?      @db.VarChar(36)
  template    UserTemplate @relation("UserTemplatePortfolio", fields: [templateId], references: [id])
  templateId  String       @db.Char(36)
  isPremium   Boolean      @default(false)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamp(6)

  @@unique([url], name: "uniqueURL", map: "uniqueURL")
}

model Subscription {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name              String              @db.VarChar(120)
  planId            String?             @db.Char(36)
  userId            String?             @db.Char(36)
  teamId            String?             @db.Char(36)
  team              Team?               @relation("TeamSubscription", fields: [teamId], references: [id])
  user              User?               @relation("UserSubscriptions", fields: [userId], references: [id])
  channel           PaymentChannelType? // This should be removed, but think well well first
  paymentChannelId  String?             @db.Char(36)
  expiry            DateTime?           @db.Timestamp(6)
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  switchToBasicDate DateTime?           @db.Timestamp(6)
  users             User[]              @relation("UserSubscription")
  paymentChannel    PaymentChannel?     @relation("PaymentChannelSubscription", fields: [paymentChannelId], references: [id])

  activeUsers User[] @relation("UserSubscriptionActive")
  activeTeams Team[] @relation("TeamSubscriptionActive")
}

model Plan {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name            String           @db.VarChar(120)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  features        Feature[]        @relation("PlanFeature")
  paymentChannels PaymentChannel[] @relation("PlanPaymentChannel")
}

model PaymentChannel {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  channel       PaymentChannelType @default(PAYSTACK)
  planId        String             @db.Char(36)
  paymentPlanId String?            @db.Char(36)
  plan          Plan               @relation("PlanPaymentChannel", fields: [planId], references: [id])
  createdAt     DateTime           @default(now()) @db.Timestamp(6)
  updatedAt     DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  subscriptions Subscription[]     @relation("PaymentChannelSubscription")
}

enum PaymentChannelType {
  PAYSTACK
  STRIPE
  PADDLE
}

model Feature {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  feature   String   @db.VarChar(120)
  value     String   @db.VarChar(36)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  plan      Plan?    @relation("PlanFeature", fields: [planId], references: [id])
  planId    String?  @db.Char(36)
}

enum TemplateType {
  TEMPLATE
  CUSTOMIZED
}

model Template {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title         String         @db.VarChar(2048)
  slug          String         @default("Default") @db.VarChar(2048)
  type          TemplateType   @default(TEMPLATE)
  userId        String?        @db.Char(36)
  user          User?          @relation("UserTemplate", fields: [userId], references: [id])
  content       String         @db.Text
  css           String?        @db.Text
  visibility    Visibility     @default(PUBLIC)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  userTemplates UserTemplate[] @relation("TemplateUserTemplate")

  @@unique([slug], name: "uniqueSlug", map: "uniqueSlug")
}

model UserTemplate {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  content    String      @db.Text
  templateId String      @db.Char(36)
  template   Template    @relation("TemplateUserTemplate", fields: [templateId], references: [id])
  portfolios Portfolio[] @relation("UserTemplatePortfolio")
  css        String?     @db.Text
  createdAt  DateTime    @default(now()) @db.Timestamp(6)
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamp(6)
}

enum Visibility {
  PUBLIC
  PRIVATE
  TEAM
  UNLISTED
}

enum PaymentType {
  ARTICLE
  MONTHLY
  ONETIME
}

enum StatusType {
  PUBLISHED
  DRAFT
  DELETED
  INACTIVE
}

enum ContentType {
  TEXT
  AUDIO
  VIDEO
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String   @db.VarChar(120)
  userId    String?  @db.Char(36)
  user      User?    @relation("UserTag", fields: [userId], references: [id])
  teamId    String?  @db.Char(36)
  team      Team?    @relation("TeamTag", fields: [teamId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Notebook {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String    @db.VarChar(120)
  shareable Boolean   @default(false)
  link      String?   @db.VarChar(2048)
  userId    String?   @db.Char(36)
  user      User?     @relation("UserNotebook", fields: [userId], references: [id])
  teamId    String?   @db.Char(36)
  team      Team?     @relation("TeamNotebook", fields: [teamId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  Note      Note[]    @relation("NotebookNote")
  Content   Content[] @relation("NotebookContent")
}

model Note {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  title      String?  @db.VarChar(120)
  content    String?  @db.VarChar(2048)
  shareable  Boolean  @default(false)
  link       String?  @db.VarChar(2048)
  userId     String?  @db.Char(36)
  notebookId String   @db.Char(36)
  notebook   Notebook @relation("NotebookNote", fields: [notebookId], references: [id])
  user       User?    @relation("UserNote", fields: [userId], references: [id])
  teamId     String?  @db.Char(36)
  team       Team?    @relation("TeamNote", fields: [teamId], references: [id])
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Category {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name       String      @db.VarChar(120)
  color      String?     @db.Char(6)
  userId     String?     @db.Char(36)
  user       User?       @relation("UserCategory", fields: [userId], references: [id])
  teamId     String?     @db.Char(36)
  team       Team?       @relation("TeamCategory", fields: [teamId], references: [id])
  createdAt  DateTime    @default(now()) @db.Timestamp(6)
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  contents   Content[]   @relation("ContentCategory")
  portfolios Portfolio[] @relation("CategoryPortfolio")
}

model Topic {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String   @db.VarChar(120)
  teamId    String?  @db.Char(36)
  team      Team?    @relation("TeamTopic", fields: [teamId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Media {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  teamId    String    @db.Char(36)
  team      Team      @relation("TeamMedia", fields: [teamId], references: [id])
  title     String?   @db.VarChar(2048)
  type      MediaType @default(IMAGE)
  url       String    @db.VarChar(2048)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
}

enum MediaType {
  VIDEO
  IMAGE
  AUDIO
}

model Social {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name      String   @db.VarChar(120)
  link      String   @db.VarChar(2048)
  icon      String?  @db.VarChar(2048)
  user      User     @relation("SocialUser", fields: [userId], references: [id])
  userId    String   @db.Char(36)
  teamId    String?  @db.Char(36)
  team      Team?    @relation("TeamSocial", fields: [teamId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}
